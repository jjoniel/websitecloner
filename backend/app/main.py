"""
Orchids Challenge Backend API

This FastAPI application provides a web scraping endpoint that captures a screenshot of a user-submitted URL,
sends it to Google Gemini for HTML/CSS/JS reconstruction, and returns the result.
Uses Browserbase and Selenium for remote browser automation.
"""

import os
import time
import uvicorn
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.remote.remote_connection import RemoteConnection
from google import genai
from browserbase import Browserbase


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Initializes Browserbase and Google Gemini client on startup."""
    global bb, client
    bb = Browserbase(api_key=os.environ["BROWSERBASE_API_KEY"])
    client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))
    yield


# Create FastAPI instance
app = FastAPI(
    title="Orchids Challenge API - Joniel Augustine Jerome",
    description=("FastAPI Implementation for the Orchids Challenge backend"),
    version="1.0.0",
    lifespan=lifespan,
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, replace with specific domains
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

load_dotenv()

bb = None
client = None


# Pydantic models
class URLRequest(BaseModel):
    """Request body model for URL scraping."""

    url: str


class BrowserbaseConnection(RemoteConnection):
    """Custom RemoteConnection to integrate Browserbase authentication headers."""

    def __init__(self, session_id, *args, **kwargs):
        self.session_id = session_id
        super().__init__(*args, **kwargs)

    def get_remote_connection_headers(self, parsed_url, keep_alive=False):
        headers = super().get_remote_connection_headers(parsed_url, keep_alive)
        headers.update(
            {
                "x-bb-api-key": os.environ["BROWSERBASE_API_KEY"],
                "session-id": self.session_id,
            }
        )
        return headers


# Root endpoint
@app.get("/")
async def root():
    """Root endpoint for verifying API availability."""
    return {"message": "Hello from Orchids Challenge API!", "status": "running"}


# Health check endpoint
@app.get("/health")
async def health_check():
    """Health check endpoint for service monitoring."""
    return {"status": "healthy", "service": "orchids-challenge-api"}


@app.post("/api/scrape")
async def scrape_url(data: URLRequest):
    """
    Accepts a URL, loads it in a Browserbase browser session, takes a screenshot,
    uploads the image to Google Gemini, and returns reconstructed HTML.
    """
    session = bb.sessions.create(project_id=os.environ["BROWSERBASE_PROJECT_ID"])

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")

    connection = BrowserbaseConnection(session.id, session.selenium_remote_url)
    driver = webdriver.Remote(
        command_executor=connection, options=webdriver.ChromeOptions()
    )
    print("Navigating to:", data.url)
    driver.get(data.url)
    print("Navigated to:", data.url)

    # Wait for page to load
    time.sleep(2)

    # Capture screenshot as PNG
    png_data = driver.get_screenshot_as_png()
    print("Screenshot captured")
    # Save PNG screenshot to file
    screenshot_path = "screenshot.png"
    with open(screenshot_path, "wb") as f:
        f.write(png_data)

    driver.quit()

    # Upload image and generate response
    try:
        print("Uploading screenshot to Gemini...")
        uploaded_file = client.files.upload(file=screenshot_path)
        response = client.models.generate_content(
            model="gemini-2.5-flash-preview-05-20",
            contents=[
                uploaded_file,
                (
                    "Given this screenshot, generate an HTML/CSS/JS page that is an "
                    "exact clone of the website. Do not include any explanations or "
                    "comments. Use placeholders for any media. Keep colors and other"
                    "styles consistent."
                ),
            ],
        )
        print("Response received from Gemini.")
        if not response.text:
            raise HTTPException(
                status_code=500, detail="No content generated by Gemini API."
            )
    except Exception as e:
        print("Error with Gemini client:", e)
        raise HTTPException(
            status_code=500, detail="Failed to generate preview using Gemini API."
        ) from e

    with open("generated_page.html", "w", encoding="utf-8") as f:
        f.write(response.text[response.text.index("<!DOCTYPE html>") :])

    return FileResponse("generated_page.html", media_type="text/html")


def main():
    """Runs the FastAPI app using uvicorn."""
    uvicorn.run("app.main:app", host="127.0.0.1", port=8000, reload=False)


if __name__ == "__main__":
    main()
